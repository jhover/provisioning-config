#!/bin/env python
# 
#  Finds largest unmounted AWS/Openstack ephemeral storage device, formats it, 
#  mounts it as /home, and copies current contents of /home to it. 
#
#  Eliminate / partition from candidates
#  http://stackoverflow.com/questions/7718411/determine-device-of-filesystem-in-python
#

import logging
import os
import subprocess
import sys
import time
import urllib

# Globals
logfile="/var/log/mountdisks.log"
log = None

def setuplogging():
    global log
    
    # Set up logging. 
    # Check python version 
    major, minor, release, st, num = sys.version_info
    
    # Set up logging, handle differences between Python versions... 
    # In Python 2.3, logging.basicConfig takes no args
    #
    FORMAT23="[ %(levelname)s ] %(asctime)s %(filename)s (Line %(lineno)d): %(message)s"
    FORMAT24=FORMAT23
    FORMAT25="[%(levelname)s] %(asctime)s %(module)s.%(funcName)s(): %(message)s"
    FORMAT26=FORMAT25
    
    if major == 2:
        if minor ==3:
            formatstr = FORMAT23
        elif minor == 4:
            formatstr = FORMAT24
        elif minor == 5:
            formatstr = FORMAT25
        elif minor == 6:
            formatstr = FORMAT26
    log = logging.getLogger()    
    hdlr = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter(FORMAT23)
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    # Handle file-based logging.
    if logfile:
        hdlr = logging.FileHandler(logfile)
        hdlr.setFormatter(formatter)
        log.addHandler(hdlr)
    log.setLevel(logging.DEBUG)

def mountdisks()
# 		echo "Checking /dev/$VD ..." >> $LOGFILE
#		fdisk -l /dev/$VD 2>/dev/null | grep Disk >> $LOGFILE
#		if [ $? -eq 0 ]; then
#			d=`date`
#			echo "Virtual disk seen at /dev/$VD: $d"
#			echo "Virtual disk seen at /dev/$VD: $d" >> $LOGFILE
#			echo "Creating filesystem..."
#			echo "Creating filesystem..." >> $LOGFILE
#			mkfs.ext3 -F -L home /dev/$VD | tee $LOGFILE
#			echo "Mounting and mirroring /home..."
#			echo "Mounting and mirroring /home..." >> $LOGFILE  2>&1
#			mv -v /home /home.orig >> $LOGFILE  2>&1
#			mkdir -v /home >> $LOGFILE  2>&1
#			mount -t ext3 /dev/$VD /home >> $LOGFILE  2>&1
#			cp -avr /home.orig/* /home   >> $LOGFILE  2>&1
#			d=`date`
#			echo "Done with /dev/$VD: $d"
#			echo "Done with /dev/$VD: $d" >> $LOGFILE 

	


def getdevs()
    global log
	cmd = 'lsblk -b"
	out = runtimedcommand(cmd)
	print( out)


def runtimedcommand(command):
    global log
    before = time.time()
    log.info("Running command: '%s'" % command)
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out = None
    (out, err) = p.communicate()
    delta = time.time() - before
    log.info("Command took %d seconds." % delta)
    if p.returncode != 0:
        log.debug("Output: %s" % out.strip())
        log.debug("Error: %s" % err.strip())
        return None  
    else:
        log.debug("Command returned OK.")
        return out
	
	
if __name__ == '__main__':
    setuplogging()
    mountdisks()
   
