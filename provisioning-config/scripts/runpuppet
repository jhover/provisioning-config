#!/bin/env python
# Could be expanded to support other methods...

import logging
import os
import subprocess
import sys
import time
import urllib


# Globals

logfile="/var/log/runpuppet.log"
puppetlog="/var/log/puppet/puppet.log"
log = None

def setuplogging():
    global log
    
    # Set up logging. 
    # Check python version 
    major, minor, release, st, num = sys.version_info
    
    # Set up logging, handle differences between Python versions... 
    # In Python 2.3, logging.basicConfig takes no args
    #
    FORMAT23="[ %(levelname)s ] %(asctime)s %(filename)s (Line %(lineno)d): %(message)s"
    FORMAT24=FORMAT23
    FORMAT25="[%(levelname)s] %(asctime)s %(module)s.%(funcName)s(): %(message)s"
    FORMAT26=FORMAT25
    
    if major == 2:
        if minor ==3:
            formatstr = FORMAT23
        elif minor == 4:
            formatstr = FORMAT24
        elif minor == 5:
            formatstr = FORMAT25
        elif minor == 6:
            formatstr = FORMAT26
    log = logging.getLogger()    
    hdlr = logging.StreamHandler(sys.stdout)
    formatter = logging.Formatter(FORMAT23)
    hdlr.setFormatter(formatter)
    log.addHandler(hdlr)
    # Handle file-based logging.
    if logfile:
        hdlr = logging.FileHandler(logfile)
        hdlr.setFormatter(formatter)
        log.addHandler(hdlr)
    log.setLevel(logging.DEBUG)

def getsshkey():
    global log
    log.info("Running getsshkey()...")
    sshkeyurl="http://169.254.169.254/latest/meta-data/public-keys/0/openssh-key"


def puppetapply():
    global log
    global puppetlog
    log.info("Running puppet apply...")
    os.chdir("/etc/puppet")
    runtimedcommand("puppet apply --verbose --parser future --modulepath ./modules manifests/site.pp >> %s " % puppetlog  )


def runtimedcommand(command):
    global log
    before = time.time()
    log.info("Running command: '%s'" % command)
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
    out = None
    (out, err) = p.communicate()
    delta = time.time() - before
    log.info("Command took %d seconds." % delta)
    if p.returncode != 0:
        log.debug("Output: %s" % out.strip())
        log.debug("Error: %s" % err.strip())  
    else:
        log.debug("Command returned OK.")
    return out

if __name__ == '__main__':
    setuplogging()
    puppetapply()
   
